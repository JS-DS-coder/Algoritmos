# -*- coding: utf-8 -*-
"""Algoritmos.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1gHOrgKp-XiAW3zQGrsA1lHhZ4h9-exWW
"""

import pandas
import re

def evaluate_FxFY(str_equ, valX,valY):
  x = valX
  y = valY
  #strOut = str_equ
  strOut = str_equ.replace("x", '*(x)')
  strOut = strOut.replace("y", '*(y)')
  strOut = strOut.replace("^", "**")
  strout = strOut.replace("***","**")
  print('---->',strOut)
  out = eval(strOut)
  print(strOut)
  return out

import math 
def evaluate_Fx(str_equ, valX):
  x = valX
  #strOut = str_equ
  strOut = str_equ.replace("x", '*(x)')
  strOut = strOut.replace("^", "**")
  
  strOut = strOut.replace("***","**")
  strOut = strOut.replace("e**(x)","math.exp(x)")
  strOut = strOut.replace("e**(x+h)","math.exp(x+h)")
  print("1. ",strOut)
  out = eval(strOut)
  print(strOut)
  return out

def evaluate_derivate_fxfy(str_equ, x, y, h):
  
  strOut = str_equ.replace("x", '*(x + h)')
  strOut = strOut.replace("y", '*(y + h)')
  print(strOut)
  strOut = strOut.replace("^", "**")
  strOut = "(" + strOut + ")"
 
  out = eval(strOut)

  
  strOut = str_equ.replace("x", '*(x - h)')
  strOut = strOut.replace("y", '*(y - h)')
  strOut = strOut.replace("^", "**")
  out = out - eval(strOut)
  print(out)
  
  #strOut = str_equ.replace("x", '*(x)')
  #strOut = strOut.replace("^", "**")
  #strOut = "(" + strOut + ")"
  #print(strOut)
  #out = out + eval(strOut)
  
  out = out/(2*h)
  print(out)
  return out

def evaluate_derivate_prog_fxfy(str_equ, x,y, h):
  # F(Xo)
  strOut = str_equ.replace("x", '*(x)')
  strOut = strOut.replace("y", '*(y)')
  print(strOut)
  strOut = strOut.replace("^", "**")
  strOut = "-3*(" + strOut + ")"
  out = eval(strOut)

  # 

  strOut = str_equ.replace("x", '*(x + h)')
  strOut = strOut.replace("y", '*(y + h)')
  print(strOut)
  strOut = strOut.replace("^", "**")
  strOut = "4*(" + strOut + ")"
 
  out = out + eval(strOut)

  
  strOut = str_equ.replace("x", '*(x + 2*h)')
  strOut = strOut.replace("y", '*(y + 2*h)')
  strOut = strOut.replace("^", "**")
  out = out - eval(strOut)
  print(out)
  
  #strOut = str_equ.replace("x", '*(x)')
  #strOut = strOut.replace("^", "**")
  #strOut = "(" + strOut + ")"
  #print(strOut)
  #out = out + eval(strOut)
  
  out = out/(2*h)
  print(out)
  return out

def evaluate_derivate_fx(str_equ, x, h):
  
  strOut = str_equ.replace("x", '*(x + h)')
  print('Entro a la derivada')
 
  strOut = strOut.replace("^", "**")
  strOut = "(" + strOut + ")"
  strOut = strOut.replace("e***(x + h)","math.exp(x+h)")
  out = eval(strOut)

  
  strOut = str_equ.replace("x", '*(x - h)')

  strOut = strOut.replace("^", "**")
  strOut = strOut.replace("e***(x - h)","math.exp(x-h)")
  out = out - eval(strOut)
  print(out)
  
  #strOut = str_equ.replace("x", '*(x)')
  #strOut = strOut.replace("^", "**")
  #strOut = "(" + strOut + ")"
  #print(strOut)
  #out = out + eval(strOut)
  
  out = out/(2*h)
  print(out)
  return out

def evaluate_derivate_prog_fx(str_equ, x, h):
  # F(Xo)
  strOut = str_equ.replace("x", '*(x)')
  print(strOut)
  strOut = strOut.replace("^", "**")
  strOut = "-3*(" + strOut + ")"
  out = eval(strOut)

  # 

  strOut = str_equ.replace("x", '*(x + h)')
  print(strOut)
  strOut = strOut.replace("^", "**")
  strOut = "4*(" + strOut + ")"
 
  out = out + eval(strOut)

  
  strOut = str_equ.replace("x", '*(x + 2*h)')
  strOut = strOut.replace("^", "**")
  out = out - eval(strOut)
  print(out)
  
  #strOut = str_equ.replace("x", '*(x)')
  #strOut = strOut.replace("^", "**")
  #strOut = "(" + strOut + ")"
  #print(strOut)
  #out = out + eval(strOut)
  
  out = out/(2*h)
  print(out)
  return out

def evaluate_derivate_finite_centerfxfy(str_equ, x,y, h):
  
  strOut = str_equ.replace("x", '*(x - 2*h)')
  strOut = strOut.replace("y", '*(y - 2*h)')
  strOut = strOut.replace("^", "**")
  out = eval(strOut)

  strOut = str_equ.replace("x", '*(x - h)')
  strOut = strOut.replace("y", '*(y - h)')
  print(strOut)
  strOut = strOut.replace("^", "**")
  strOut = "-8*(" + strOut + ")"
 
  out = out + eval(strOut)

  strOut = str_equ.replace("x", '*(x + h)')
  strOut = strOut.replace("y", '*(y + h)')
  print(strOut)
  strOut = strOut.replace("^", "**")
  strOut = "8*(" + strOut + ")"
 
  out = out + eval(strOut)

  strOut = str_equ.replace("x", '*(x + 2*h)')
  strOut = strOut.replace("y", '*(y + 2*h)')
  strOut = strOut.replace("^", "**")
  out = out - eval(strOut)
  # 

 


  print(out)
  
  #strOut = str_equ.replace("x", '*(x)')
  #strOut = strOut.replace("^", "**")
  #strOut = "(" + strOut + ")"
  #print(strOut)
  #out = out + eval(strOut)
  
  out = out/(2*h)
  print(out)
  return out

def evaluate_derivate_finite_center(str_equ, x, h):
  
  strOut = str_equ.replace("x", '*(x - 2*h)')
  strOut = strOut.replace("^", "**")
  out = eval(strOut)

  strOut = str_equ.replace("x", '*(x - h)')
  print(strOut)
  strOut = strOut.replace("^", "**")
  strOut = "-8*(" + strOut + ")"
 
  out = out + eval(strOut)

  strOut = str_equ.replace("x", '*(x + h)')
  print(strOut)
  strOut = strOut.replace("^", "**")
  strOut = "8*(" + strOut + ")"
 
  out = out + eval(strOut)

  strOut = str_equ.replace("x", '*(x + 2*h)')
  strOut = strOut.replace("^", "**")
  out = out - eval(strOut)
  # 

 


  print(out)
  
  #strOut = str_equ.replace("x", '*(x)')
  #strOut = strOut.replace("^", "**")
  #strOut = "(" + strOut + ")"
  #print(strOut)
  #out = out + eval(strOut)
  
  out = out/(2*h)
  print(out)
  return out

def newtonSolverXY(x0,y0, f_x, eps,func):
  x0 = float(x0)
  y0 = float(y0)
  eps = float(eps)
  xn = x0
  yn = y0
  error = 1
  arrayIters = []
  arrayF_x = []
  arrayF_y = []
  arrayf_x = []
  arrayf_y = []
  arrayXn = []
  arrayYn = []
  arrayErr = []
  
  i = 0
  h = 0.001
  while(error > eps):
    print("...")
    if (func == 0):
      valor = (evaluate_FxFY(f_x, xn,yn)/evaluate_derivate_fxfy(f_x, xn,yn, h))
      x_n1 = xn - valor
      y_n1 = yn - valor
    elif (func == 1):
      valor = (evaluate_FxFY(f_x, xn,yn)/evaluate_derivate_prog_fxfy(f_x, xn,yn, h)) 
      x_n1 = xn -  valor
      y_n1 = yn - valor
    elif (func==2):  
      valor = (evaluate_FxFY(f_x, xn,yn)/evaluate_derivate_finite_centerfxfy(f_x, xn,yn, h))
      x_n1 = xn - valor
      y_n1 = yn - valor
    error = abs(x_n1 - xn)
    i = i + 1
    xn = x_n1
    yn = y_n1
    arrayIters.append(i)
    arrayXn.append(xn)
    arrayYn.append(yn)
    arrayErr.append(error)
    solution = [i, xn, error]

  print("Finalizo...")
  TableOut = pandas.DataFrame({'Iter':arrayIters, 'Xn':arrayXn,'Yn':arrayYn, 'Error': arrayErr}).to_numpy()
  return TableOut

def newtonSolverX(x0, f_x, eps,kmax):
  x0 = float(x0)
  eps = float(eps)
  kmax = float(kmax)
  xn = x0
  error = 1
  arrayIters = []
  arrayF_x = []
  arrayf_x = []
  arrayXn = []
  arrayErr = []
  
  i = 0
  h = 0.000001
  while ((error > eps)and(i <= kmax)):
    print("...")
    x_n1 = xn - (evaluate_Fx(f_x, xn)/evaluate_derivate_fx(f_x, xn, h))
    error = abs(x_n1 - xn)
    i = i + 1
    xn = x_n1
    arrayIters.append(i)
    arrayXn.append(xn)
    arrayErr.append(error)
    solution = [i, xn, error]

  print("Finalizo...")
  TableOut = pandas.DataFrame({'Iter':arrayIters, 'Xn':arrayXn, 'Error': arrayErr})
  return TableOut

def add(a, b):
  a = int(a)
  b = int(b)
  resultado = a + b
  return "El resultado es: " + str(resultado)

def biseccion (f_x, eps,a,b,kmax):
  
  a  = float(a)
  b  = float(b)
  eps = float(eps)
  kmax = float(kmax)
  xn =  (a+b)/2

  error = 1

  arrayIters = []
  arrayF_x = []
  arrayf_x = []
  arrayXn = []
  arrayErr = []
  
  i = 0
  h = 0.001

  print(xn)
  while((abs(error) > eps) and (i <= kmax)):
    fa  = evaluate_Fx(f_x, a)
    fxk = evaluate_Fx(f_x, xn)
    print(fa)
    print(fxk)
    if ((fa*fxk) < 0):
      b = xn
    else:
      a = xn
    xn_1 = xn
    xn = (a+b)/2
    print(xn)
    error = abs(xn_1 - xn)
    print(error)
    i = i + 1
    
    arrayIters.append(i)
    arrayXn.append(xn)
    arrayErr.append(error)
    solution = [i, xn, error]
    
   

  print("Finalizo...")
  TableOut = pandas.DataFrame({'Iter':arrayIters, 'Xn':arrayXn, 'Error': arrayErr})
  
  return TableOut

#table = newtonSolverX(0,"16x^3-4",0.000001,0)
table = biseccion("16x^3-4",0.000001,-1.5,1.5,20)

pandas.set_option('display.max_rows', table.shape[0]+1)
table

table = newtonSolverXY(-5,1,"12x^3-4x",0.000001,0)
print(table)
